M13 - SQL: Filtros e Condicionais
11/2/25

Operadores lógicos: 
AND
OR 
NOT 

Operadores IN, BETWEEN, LIKE:

O IN é ideal para buscar múltiplos valores específicos, BETWEEN para intervalos contínuos e LIKE para padrões dentro de strings.

SELECT * FROM CLIENTE WHERE ATIVO = TRUE AND LIMITE_CREDITO>6000;

SELECT * FROM CLIENTE WHERE ATIVO = TRUE OR LIMITE_CREDITO>6000;

SELECT * FROM CLIENTE
WHERE ATIVO = TRUE OR LIMITE_CREDITO >6000
AND YEAR (DATA_NASCIMENTO) >1980; 

SELECT * FROM CLIENTE
WHERE ATIVO = TRUE OR (LIMITE_CREDITO >6000
AND YEAR (DATA_NASCIMENTO) >1980); 

SELECT * FROM CLIENTE
WHERE (ATIVO = TRUE OR LIMITE_CREDITO >6000)
AND YEAR (DATA_NASCIMENTO) >1980; 

**O que vc quiser que filtra primeiro, insere em parênteses. 

NOT: 

SELECT * FROM CLIENTE WHERE NOT LIMITE_CREDITO > 6000; 

**Traz o que não satisfaz a condição. 

-----------------------------------

IN: 

SELECT * FROM CLIENTE WHERE ID_CLIENTE IN (1,2,4,6); 

BETWEEN (ENTRE): 

SELECT * FROM CLIENTE WHERE DATA_NASCIMENTO BETWEEN '1990-01-01' AND '2000-12-31';

**Quando vc filtra nro puro não coloca entre aspas simples. 

LIKE: 

SELECT * FROM CLIENTE WHERE INFO_ADICIONAIS LIKE 'REVISAO%'

SELECT * FROM CLIENTE WHERE INFO_ADICIONAIS LIKE '%REVISAO'
**Mais custoso computacionalmente. 

SELECT * FROM CLIENTE WHERE EMAIL LIKE '__%@__%.COM'; 
-- Usar NOT. 
-- 2 underlines e curinga (%), o underline é um caracter. 

SELECT * FROM CLIENTE WHERE NOT EMAIL LIKE '__%@__%.COM';

SELECT * FROM CLIENTE WHERE EMAIL LIKE '__%@EMAIL.COM';

SELECT * FROM CLIENTE WHERE EMAIL LIKE '___@_MAIL.COM' OR EMAIL LIKE '___@__MAIL.COM';

SELECT * FROM CLIENTE 
WHERE (NOME LIKE 'A%' OR NOME LIKE 'B%' OR NOME LIKE 'C%') AND ATIVO = TRUE; 

---------------------------------

Could not acquire management access for administration 

RuntimeError: Target host is configured as Windows, but seems to bem a different OS. Please review the connection settings

-- Resolvi reinstalando o Workbench. 


Valores nulos e não nulos

SELECT * FROM CLIENTE WHERE INFO_ADICIONAIS IS NULL; 

SELECT * FROM CLIENTE WHERE INFO_ADICIONAIS IS NOT NULL;

**O NOT NULL pode trazer campos preenchidos com espaço em branco.

SELECT * FROM CLIENTE 
WHERE LIMITE_CREDITO > 5000 AND (INFO_ADICIONAIS IS NULL OR ID_PRODUTO IS NULL); 
-- Primeiro irá validar o que está em parênteses. 

-- IFNULL: 

Utilizar quando não puder ter valores nulos. 

SELECT NOME, LIMITE_CREDITO, IFNULL(LIMITE_CREDITO, 0) FROM CLIENTE; 

** IFNULL nesse caso retorna valor 0 se o limite_credito for null. 
Pode inserir texto também: 

SELECT NOME, INFO_ADICIONAIS, IFNULL(INFO_ADICIONAIS, 'Nada consta') as info_add_tratadas FROM CLIENTE;

Para nomear o campo: 

SELECT NOME, LIMITE_CREDITO, IFNULL(LIMITE_CREDITO, 0) AS limite_credito_tratado FROM CLIENTE;

-- NULLIF: 

Se (campo) for igual ao segundo argumento, então retorna NULL. 

No IFNULL, o que for nulo ele apresenta o segundo argumento. 

SELECT NOME, INFO_ADICIONAIS, NULLIF (INFO_ADICIONAIS, 'Revisão de cadastro') as info_add_tratada FROM CLIENTE; 

Se tiver clientes com info_adicionais diferente de 'Revisão de cadastro', como null ou outro texto, o SGBD vai repetir este texto na coluna de tratadas. 

Serve para tratar informações em campos que não era pra escrever nada mas constam coisas escritas. 

SELECT NOME, IFNULL (NULLIF (INFO_ADICIONAIS, ' '), 'Nada consta') as info_add FROM CLIENTE; 

**Primeiro vai executar o parêntese de dentro, é no sentido mais pra dentro pra fora. 
Então ficou assim: 
SE INFO_ADICIONAIS IGUAL A ESPAÇO EM BRANCO, INSIRO NULL; 
SE NULL, INSIRO NADA CONSTA. 

-- COALESCE: 

Verifica informações nulas em vários campos, em uma lista. 

SELECT NOME, COALESCE (EMAIL,INFO_ADICIONAIS,LIMITE_CREDITO, ID_PRODUTO, 'Cadastro nulo') as CADASTRO_NULO FROM CLIENTE; 

Nesse caso vai apresentar 'Cadastro nulo' se todos esses campos forem nulos. 

O campo que não for nulo é o que ele apresenta. 

SELECT NOME, COALESCE (INFO_ADICIONAIS,LIMITE_CREDITO, ID_PRODUTO, 'Cadastro nulo') as CADASTRO_NULO FROM CLIENTE 
where COALESCE (INFO_ADICIONAIS,LIMITE_CREDITO, ID_PRODUTO, 'Cadastro nulo') = 'Cadastro nulo'

Assim apresenta só quem retornar 'Cadastro nulo'.

-- TRIM

Remove espaços em branco. 

SELECT '		Remover Espaços 		',TRIM('		Remover Espaços 		');


SELECT NOME, INFO_ADICIONAIS FROM CLIENTE WHERE INFO_ADICIONAIS <> TRIM(INFO_ADICIONAIS); 

Nesse caso vai retornar o que for diferente de TRIM no campo INFO_ADICIONAIS. 

Sintaxe: 

TRIM([BOTH | LEADING | TRAILING] [caractere] FROM string)

BOTH (padrão) → Remove do início e do final.
LEADING → Remove apenas do início.
TRAILING → Remove apenas do final.
caractere → Opcional; se não for especificado, remove espaços em branco.

SELECT TRIM(BOTH '-' FROM '---SQL---') AS resultado;  
-- Retorna: 'SQL'

SELECT TRIM(LEADING '0' FROM '000123') AS resultado;
-- Retorna: '123'

SELECT TRIM(TRAILING 'x' FROM 'Helloxxx') AS resultado;
-- Retorna: 'Hello'

**Essas consultas abaixo são para quando vc não tem espaço, campo NULL; e quando vc tem espaço, mas isso também é pra considerar como null: 

SELECT * FROM CLIENTE WHERE NULLIF(TRIM(INFO_ADICIONAIS), '') IS NULL; 

SELECT * FROM CLIENTE WHERE NULLIF(INFO_ADICIONAIS,' ') IS NULL; 

---------------------------

-- IF

Para condições simples e diretas. 

SELECT NOME, IF (LIMITE_CREDITO>6000, 'Alto', 'Baixo') AS categoria_limite FROM CLIENTE; 

**Quer dizer: 
SE limite_credito>6000 ENTÃO 'Alto', SE NÃO, 'Baixo'
expressão nomeada de categoria_limite

SELECT ID_CLIENTE, NOME, LIMITE_CREDITO, 
IF (LIMITE_CREDITO > 9000, 'Premium',
IF (LIMITE_CREDITO BETWEEN 5000 AND 9000, 'Gold', 
'Baixo')) AS categoria_limite
FROM CLIENTE; 

-- CASE

Para condições completas, com mais especificações. 

SELECT NOME, LIMITE_CREDITO,
CASE WHEN LIMITE_CREDITO > 6000 THEN 'Alto'
ELSE 'Baixo'
END AS categoria_limite
FROM CLIENTE; 

**Abre com CASE, fecha com END. 

SELECT ID_CLIENTE, NOME, LIMITE_CREDITO, 
CASE
WHEN LIMITE_CREDITO > 9000 THEN 'Premium'
WHEN LIMITE_CREDITO BETWEEN 5000 AND 9000 THEN 'Gold'
ELSE 'Baixo' 
END AS categoria_limite
FROM CLIENTE;

SELECT ID_CLIENTE, NOME, LIMITE_CREDITO, 
CASE
WHEN LIMITE_CREDITO > 9000 THEN 'Premium'
WHEN LIMITE_CREDITO BETWEEN 5000 AND 9000 THEN 'Gold'
ELSE 'Baixo' 
END AS categoria_limite,
CASE
WHEN YEAR(DATA_NASCIMENTO) >= 1995 THEN '30-'
ELSE '30+'
END AS IDADE
FROM CLIENTE;

------------------------------------------

CONCEITOS: 

BETWEEN:

(Entre um valor e outro)
Um operador SQL utilizado para filtrar os resultados de uma consulta dentro de um intervalo específico. É ideal para buscar valores contínuos, como datas ou números, melhorando a performance das consultas.

CASE:

Uma expressão condicional em SQL que permite a execução de diferentes conjuntos de instruções com base em múltiplas condições. É mais adequado para situações complexas onde várias condições precisam ser avaliadas.

IFNULL:

Uma função SQL que substitui valores nulos por um valor especificado. 
É útil para garantir que os resultados das consultas não contenham valores nulos, o que pode ser importante para cálculos e análises.

LIKE:

Um operador SQL utilizado para buscar padrões dentro de strings. Utiliza o símbolo de porcentagem (%) como coringa para representar zero ou mais caracteres, permitindo buscas flexíveis e detalhadas.

NULLIF:

Uma função SQL que retorna NULL se os dois argumentos fornecidos forem iguais. 
Caso contrário, retorna o primeiro argumento. É útil para evitar valores indesejados em resultados de consultas.

TRIM:

Uma função SQL que remove espaços em branco do início e do fim de uma string. É essencial para garantir a precisão dos dados, especialmente ao comparar ou manipular strings.

Uso adequado de operadores lógicos

Utilize operadores lógicos (`AND`, `OR`, `NOT`) para melhorar a precisão das consultas SQL. Compreenda a prioridade dos operadores e utilize parênteses para definir a ordem de execução das operações lógicas. Adicione comentários nas consultas para facilitar a compreensão e manutenção do código.

Filtragem eficiente com operadores "IN", "BETWEEN" e "LIKE"

Utilize o operador `IN` para buscar múltiplos valores específicos, `BETWEEN` para buscar valores dentro de um intervalo contínuo e `LIKE` para buscar padrões dentro de strings. Prefira `BETWEEN` para melhorar a performance e evite coringas no início das consultas para evitar buscas amplas e lentas.

Tratamento de valores nulos e não nulos

Utilize comandos como `IS NULL` e `IS NOT NULL` para tratar valores nulos e não nulos. Utilize operadores e funções como `IFNULL` e `NULLIF` para substituir ou identificar valores nulos. Entenda as regras de negócio para aplicar o tratamento adequado aos dados nulos.

Uso de condicionais IF e CASE

Utilize condicionais `IF` para análises simples de um único atributo e `CASE` para múltiplas condições, proporcionando uma estrutura mais organizada e legível. Teste todas as condições possíveis para garantir a funcionalidade correta do código.

Aplicabilidade: 

Segmentação de Clientes: 
Utilizar operadores lógicos e condicionais para segmentar clientes com base em múltiplos critérios, como idade, localização e histórico de compras.

Análise de Vendas: 
Filtrar dados de vendas utilizando operadores `IN`, `BETWEEN` e `LIKE` para identificar padrões e tendências de mercado.

O que são operadores lógicos em SQL e como eles são usados?

Operadores lógicos em SQL, como `AND`, `OR` e `NOT`, são usados para combinar múltiplas condições em uma consulta. Eles ajudam a melhorar a filtragem e a precisão das consultas. A ordem de execução das operações lógicas pode ser controlada usando parênteses. Por exemplo, `SELECT * FROM tabela WHERE condição1 AND (condição2 OR condição3)`.

No SQL, os parênteses têm a maior precedência e definem a ordem de avaliação dos operadores lógicos (AND, OR, NOT). O que estiver dentro dos parênteses será avaliado primeiro, independentemente da ordem padrão dos operadores.

Quais são as boas práticas ao usar operadores lógicos em SQL?

Algumas boas práticas incluem o uso de parênteses para definir a ordem de execução das operações lógicas, adicionar comentários nas consultas para melhorar a legibilidade e testar as consultas com exemplos variados para garantir a precisão dos resultados. Além disso, é importante entender a prioridade dos operadores para construir a lógica de filtragem corretamente.

Por que é importante tratar valores nulos em SQL?

Tratar valores nulos é crucial para garantir a integridade e precisão dos dados. Valores nulos podem afetar cálculos, agregações e comparações, levando a resultados incorretos. Comandos como `IS NULL` e `IS NOT NULL`, e funções como `IFNULL` e `NULLIF`, ajudam a gerenciar esses valores adequadamente.

Como usar a função TRIM para tratar espaços em branco em SQL?

A função `TRIM` é usada para remover espaços em branco no início e no final de uma string. Isso é útil para garantir que os dados sejam comparados corretamente e para evitar problemas de formatação. Por exemplo, `SELECT TRIM(coluna) FROM tabela` remove espaços em branco da coluna especificada.

Qual a importância de testar todas as condições possíveis ao usar condicionais em SQL?

Testar todas as condições possíveis ao usar condicionais como `IF` e `CASE` é essencial para garantir que a lógica da consulta funcione corretamente em todos os cenários. Isso ajuda a evitar erros e garante que a consulta retorne os resultados esperados para todas as possíveis entradas de dados.

---------------------------------------

ERROS COMUNS: 

Esquecer de usar parênteses para definir a ordem de execução dos operadores lógicos.

Iniciantes frequentemente esquecem de usar parênteses para definir a ordem de execução dos operadores lógicos, resultando em consultas que retornam resultados inesperados.

Exemplo correto: 

SELECT * FROM clientes
WHERE (cidade = 'São Paulo' OR cidade = 'Rio de Janeiro') AND idade > 30;

Passo 1: Identifique os operadores lógicos na consulta.
Passo 2: Use parênteses para agrupar as condições que devem ser avaliadas juntas.
Passo 3: Teste a consulta para garantir que os resultados estão corretos.


Uso incorreto do operador LIKE com coringas.

Iniciantes podem usar coringas no início do padrão de busca com o operador LIKE, resultando em consultas lentas e ineficientes.

SELECT * FROM produtos
WHERE nome LIKE 'computador%';

